@{
    @using TFG.Models
    @model TFG.Models.ScriptsResults

    ViewData["Title"] = "Data Masking Report";
}
@using (Html.BeginForm("GoToSelection", "Home"))
{
    <input type="text" id="functionalitySelected1" class="functionalitySelected" name="functionalitySelected" />
    <input id="hidden-btn1" class="hidden-btn" type="submit" style="display: none;" />
}
@using (Html.BeginForm("GetRecord", "Home"))
{
    <input type="text" id="record" class="functionalitySelected" name="record" />
    <input type="text" id="functionalitySelected6" class="functionalitySelected" name="functionalitySelected" />
    <input type="text" id="data2" class="functionalitySelected" name="data2" />
    <input id="hidden-btn6" class="hidden-btn" type="submit" style="display: none;" />
}
<!-- A navegation bar which does not navigate, it only shows the chosen database name along with a button that
    allows the user to go to the corresponding page to change it, if needed and show the current page (receiving the functionality selected from the controller)-->
<nav class="navbar nav_color">
    <div id="Top-container">
        <div id="Top">
            <span class='database_icon'></span>
            <span class="top-text">@Model.database</span>
            <button type="button" onclick='window.location.href="DatabaseConnection"' class="btn btn-default" data-toggle="tooltip" data-placement="auto" title="Change database"><span class='folder_icon'></span></button>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="MainPage" MainPage">Home</a></li>
                <li class="breadcrumb-item"><a id="selection-a" onclick="goToSelection('@Model.functionality')" style="color: orange;" Selection">Selection</a></li>
                <li class="breadcrumb-item active" aria-current="page">Create Masks</li>
            </ol>
        </div>
    </div>
</nav>
<!-- This part is the most complicated of this view
    It gets the data sent from the controller (double array with the database entry.Value names and column names of each entry.Value)
    Then it creates for each entry.Value an item of an accordion which when expanded shows its columns with checkboxes for all of those items-->
<div id="middle_container" class="left-half">
    <div id="selection-top" class="centeredBig">
        <h3>
            <span>Data Masking Report</span>
        </h3>
    </div>
    <div id="accordion" class="overflow-auto left-half" style="width:20vw;">
        <span class="font-weight-bold">Tables:</span>
        <br />
        @foreach (KeyValuePair<string, string[]> entry in Model.ColumnsSelected)
        {
            string collapse = "#collapse" + entry.Key;

            <div class="card nav_color">
                <div class="card-header" id="@entry.Key">
                    <h5>
                        <button class="btn btn-link" data-toggle="collapse" data-target="@collapse" aria-expanded="true" aria-controls="collapseOne">
                            @entry.Key
                        </button>
                    </h5>
                </div>

                <div id="@collapse.Substring(1)" class="collapse hide" aria-labelledby="@entry.Key" data-parent="#accordion">
                    <div class="card-body">
                        <span style="color: white;">@entry.Key columns: </span>
                        <br />
                        @for (int i = 0; i < ((string[])entry.Value).Length; i++)
                        {
                            string name = @entry.Key + '.' + @entry.Value[i];
                            if (Model.records.ContainsKey(name))
                            {
                                <button class="btn btn-link" onclick="openTab(event, '@name', true)">@entry.Value[i]</button>
                                <br />
                            }
                            else
                            {
                                <button class="btn btn-link" onclick="checkRecord(event, '@name', '@Model.functionality')">@entry.Value[i]</button>
                                <br />
                            }
                        }
                    </div>
                </div>

            </div>
        }
    </div>
    <div id="Tab-contents" class="overflow-auto">
        <div id="default" class="tabcontent">
            <h2 style="padding-top:35vh;">No column selected, select one from the dropdown on the left</h2>
        </div>
        @foreach (KeyValuePair<string, string[]> entry in Model.ColumnsSelected)
        {
            for (int i = 0; i < entry.Value.Length; i++)
            {
                string name = @entry.Key + '.' + @entry.Value[i];
                if (Model.records.ContainsKey(name))
                {
                    string[] record = Model.records[name];

                    <div id="@name" class="tabcontent" style="display: none;">
                        <table class="table table-striped overflow-auto">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">@entry.Key Record Number</th>
                                    <th scope="col">Column data (@entry.Value[i])</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int j = 1; j <= record.Length; j++)
                                {
                                    <tr>
                                        <th scope="row">@j</th>

                                        <td>@record[j - 1]</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        }
    </div>
</div>
<!-- This part is perform whole actions like selecting everything or nothing and running the functionality with the selected items -->
<div id="controls">
    <div id="controls-inside">
        <span>Select a mask type</span>
        @foreach (KeyValuePair<string, string[]> entry in Model.ColumnsSelected)
        {
            for (int i = 0; i < entry.Value.Length; i++)
            {
                string dropdown = @entry.Key + '.' + @entry.Value[i] + "Dropdown";
                string name = @entry.Key + '.' + @entry.Value[i];
                string text = dropdown + "Text";
                string stri;

                if (Model.types!=null && Model.types.ContainsKey(name))
                {
                    stri = Model.types[name];
                } else
                {
                    stri = "None";
                }

                <div class="dropdown">
                    <button class="btn btn-outline-dark dropdown-toggle tabcontent" type="button" id="@dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="display: none;">
                        <span id="@text">@stri</span>
                    </button>


                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" onclick="changeName('@text', 'DNI')">DNI</a>
                        <a class="dropdown-item" onclick="changeName('@text', 'Phone Number')">Phone Number</a>
                        <a class="dropdown-item" onclick="changeName('@text', 'Credit card')">Credit card</a>
                        <a class="dropdown-item" onclick="changeName('@text', 'Email')">Email</a>
                        <a class="dropdown-item" onclick="changeName('@text', 'None')">None</a>
                    </div>
                </div>
            }
        }
        @using (Html.BeginForm("GoToPageAfterCreate", "Home"))
        {
            <input type="text" id="functionalitySelected4" class="functionalitySelected" name="functionalitySelected" />
            <input type="text" id="data" class="functionalitySelected" name="data" />
            <input id="hidden-btn4" class="hidden-btn" type="submit" style="display: none;" />
        }
        <div id="bottom-buttons">
            <button type="button" onclick='goToPageAfterCreate("@Model.functionality")' class="btn btn-outline-primary">Confirm masks selections</button>
        </div>
    </div>
</div>